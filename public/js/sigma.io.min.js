(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//  Sigma.io

//  (c) 2013 Davy Duperron
//  Client side

(function () {

  'use strict';

  //  Reference to global object and main app
  var root = window,
      Sigma = root.Sigma = {};

  //  App host:port
  Sigma.host = 'http://192.168.0.1';
  Sigma.port = 1337;

  //  Socket.io connection on node server
  Sigma.socket = io.connect(Sigma.host);

  //  Load modules
  Sigma.clickAndTouchListener = require('./modules/clickAndTouchListener.js');
  Sigma.disableMouseWheelAndTouchMove = require('./modules/disableMouseWheelAndTouchMove.js');
  Sigma.connectOrCreateButton = require('./modules/connectOrCreateButton.js');
  Sigma.date = require('./modules/date.js');
  Sigma.addContent = require('./modules/addContent.js');
  Sigma.updateContent = require('./modules/updateContent.js');
  Sigma.deleteContent = require('./modules/deleteContent.js');
  Sigma.preventPasting = require('./modules/preventPasting.js');
  Sigma.dragAndDrop = require('./modules/dragAndDrop.js');
  Sigma.storeImage = require('./modules/storeImage.js');
  Sigma.loadResponsiveImages = require('./modules/loadResponsiveImages.js');
  Sigma.asyncUserAndHistoryState = require('./modules/asyncUserAndHistoryState.js');
  Sigma.makeOwnerArticlesEditable = require('./modules/makeOwnerArticlesEditable.js');
  Sigma.observeWidth = require('./modules/observeWidth.js');
  Sigma.tools = require('./modules/tools.js');
  Sigma.setObservers = require('./modules/setObservers.js');
  Sigma.droppedImages = require('./modules/droppedImages.js');
  Sigma.simpleCounter = require('./modules/simpleCounter.js');
  Sigma.synchronize = require('./modules/synchronize.js');
  Sigma.contentEditing = require('./modules/contentEditing.js');
  Sigma.getChannelId = require('./modules/getChannelId.js');
  Sigma.getMongoId = require('./modules/getMongoId.js');
  Sigma.changeId = require('./modules/changeId.js');
  Sigma.getTempId = require('./modules/getTempId.js');
  Sigma.listen = require('./modules/listen.js');
  Sigma.disconnectObservers = require('./modules/disconnectObservers.js');
  Sigma.getHistory = require('./modules/getHistory.js');
  Sigma.tryLocalStorage = require('./modules/tryLocalStorage.js');
  Sigma.heroHeader = require('./modules/heroHeader.js');
  Sigma.navigation = require('./modules/navigation.js');
  Sigma.animationListener = require('./modules/animationListener.js');
  Sigma.signIn = require('./modules/signIn.js');
  Sigma.signUp = require('./modules/signUp.js');
  Sigma.userIsConnected = require('./modules/userIsConnected.js');
  Sigma.resetAndHighlightUserArticles = require('./modules/resetAndHighlightUserArticles.js');
  Sigma.manageMessage = require('./modules/manageMessage.js');
  Sigma.getSocketMessage = require('./modules/getSocketMessage.js');
  Sigma.saveManager = require('./modules/saveManager.js');
  Sigma.isOnLine = require('./modules/isOnLine.js');

  //  Load components of the app when the DOM is ready
  Sigma.ready = (function () {
    var componentsToLoad = function () {
      Sigma.observeWidth();
      Sigma.getChannelId();
      Sigma.getMongoId();
      Sigma.getHistory();
      Sigma.tryLocalStorage.init();
      Sigma.getSocketMessage();
      Sigma.saveManager.init();
      Sigma.preventPasting();
      Sigma.dragAndDrop();
    };
    document.addEventListener('DOMContentLoaded', componentsToLoad, false );
  }());

}).call(window);//  Sigma.addContent module

//  New content generator
module.exports = function (html, id, title, content, owner, editable) {
  var main = document.querySelector('main'),
      firstRow = main.querySelector('.row:first-child'),
      cellsInFirstRow = firstRow !== null ? firstRow.children.length : 0,
      newArticle = document.createElement('article');
  newArticle.setAttribute('data-structure', 'article');
  newArticle.setAttribute('class', 'cell');
  //  Create article from scratch or inject content from database
  if (!html) {
    //  Create new h1 for title
    var newTitle = document.createElement('h1');
    newTitle.setAttribute('data-sigma', 'title');
    newTitle.setAttribute('contenteditable', editable);
    newTitle.appendChild(document.createTextNode(title));
    //  Create new h2 for user
    var newOwner = document.createElement('h2');
    newOwner.setAttribute('data-owner', owner);
    newOwner.appendChild(document.createTextNode(owner));
    //  Create new date
    var newDate = document.createElement('time');
    newDate.appendChild(document.createTextNode(Sigma.date.now()));
    newDate.setAttribute('datetime', Sigma.date.html());
    //  Create new p for content
    var newContent = document.createElement('article');
    newContent.setAttribute('data-sigma', 'content');
    newContent.setAttribute('contenteditable', editable);
    newContent.appendChild(document.createTextNode(content));
    //  Append childs in article
    newArticle.appendChild(newTitle);
    newArticle.appendChild(newOwner);
    newArticle.appendChild(newDate);
    newArticle.appendChild(newContent);
  } else {
    //  Assign id
    newArticle.dataset.idType = 'const';
    newArticle.dataset.mongoId = id;
    //  Inject content
    newArticle.innerHTML = html;
  }
  //  Add article to a new row or to the first one
  if (cellsInFirstRow === 0 || cellsInFirstRow === 3) {
    //  Add new row
    var newRow = document.createElement('div');
    newRow.setAttribute('class', 'row');
    main.insertBefore(newRow, main.firstChild);
    //  Then add new article
    newRow.appendChild(newArticle);
  } else {
    firstRow.insertBefore(newArticle, firstRow.firstChild);
  }
};//  Sigma.animationListener module

//  Cross-browser animation listener
module.exports = function (state, target, action, removeWhenDone) {
  //  State is false = animationstart | true = animationend
  var vendorPrefixes = ['animation', 'webkitAnimation', 'MSAnimation', 'oAnimation'],
      addState = function (prefix) {
        return prefix + (prefix === 'animation' ? (state ? 'end' : 'start') : (state ? 'End' : 'Start'));
      },
      animationListeners = vendorPrefixes.map(addState),
      actionAndRemoveListeners = function () {
        //  Launch requested action
        var _this = this;
        action();
        //  Remove animation listeners if wanted
        if (removeWhenDone) {
          animationListeners.forEach(function (animation) {
            _this.removeEventListener(animation, actionAndRemoveListeners, false);
          });
        }
      };
  //  Add cross-browser animation listeners based on state
  animationListeners.forEach(function (animation) {
    target.addEventListener(animation, actionAndRemoveListeners, false);
  });
};//  Sigma.asyncUserAndHistoryState module

//  We need to know that both getHistory module and tryLocalStorage/userIsConnected module are completed
module.exports = {
  modulesLoaded: 0,
  makeLiveForUser : function () {
    var _this = this;
    //  Disconnect observers
    Sigma.disconnectObservers();
    //  Check if channel was empty and populate it with a first post
    if (_this.channelIsEmpty) {
      var node = document.querySelector('[data-owner="generated by Sigma"]').parentNode;
      //  If node exists on the client
      if (node !== null) {
        //  Remove it
        node.parentNode.removeChild(node);
        //  Then add a new editable one for the user
        var title = 'Welcome here '+Sigma.username+' !',
            content = 'It seems that you are the very first person on that channel. Try to edit the title and the content of this article!';
        Sigma.addContent(false, undefined, title, content, Sigma.username, true);
      }
    }
    //  Set owner's articles as editable
    Sigma.makeOwnerArticlesEditable();
    //  Attach tools
    Sigma.tools.attach();
    //  Add create button
    Sigma.connectOrCreateButton(false);
    //  Reset and highlight user's articles
    Sigma.resetAndHighlightUserArticles();
    //  Set observers
    Sigma.setObservers();
    //  Welcome user
    Sigma.manageMessage(true, 'Hi '+Sigma.username+'! Nice to see you there!', true);
  },
  check : function () {
    //  Increment when called
    ++this.modulesLoaded;
    //  If two calls occured at least
    if (this.modulesLoaded >= 2) {
      this.makeLiveForUser();
    }
  }
};//  Sigma.changeId module

// Change tempId to mongoId
module.exports = function (tempId, id, type) {
  var selector = '[data-mongo-id="'+tempId+'"]',
      appWidth = document.querySelector('[data-app-width]'),
      node = document.querySelector(selector),
      html = node.innerHTML;
  node.dataset.idType = 'const';
  node.dataset.mongoId = id;
  //  Then update for other clients as changes may have occured meanwhile
  switch (type) {
    //  Articles
    case 'article':
      Sigma.socket.emit(Sigma.getChannelId, { action: 'update', mongoId: id, html: html, owner: Sigma.username });
      break;
    //  Images
    case 'image':
      node.src = Sigma.host+':'+Sigma.port+'/data/'+id+'/'+appWidth.dataset.appWidth;
      break;
  }
};//  Sigma.clickAndTouchListener module

//  Device-agnostic click and touch add or remove listeners
module.exports = {
  functions : {},
  preventClickIfTouch : function (event) {
    if (event.type === 'touchstart') {
      event.preventDefault();
    }
  },
  add : function (target, functionName, functionCode, disablePreventClickIfTouch) {
    var _this = this,
        code = functionCode;
    //  DisablePreventClickIfTouch is optional and set to false by default - trick for contenteditable
    disablePreventClickIfTouch = disablePreventClickIfTouch || false;
    //  Store code to execute in functions object
    _this.functions[functionName] = function (event) {
      //  If event is touchstart we prevent the click event from firing
      if(!disablePreventClickIfTouch) {
        _this.preventClickIfTouch(event);
      }
      //  Then we execute function code
      code(event);
    };
    //  As we can't detect if the device use click or touch events, we use both!
    target.addEventListener('click', _this.functions[functionName], false);
    target.addEventListener('touchstart', _this.functions[functionName], false);
  },
  remove : function (target, functionName) {
    var _this = this;
    target.removeEventListener('click', _this.functions[functionName], false);
    target.removeEventListener('touchstart', _this.functions[functionName], false);
  }
};//  Sigma.connectOrCreateButton module

//  Add connect or create button in nav
module.exports = function (type) {
  //  Connect is true | Create is false
  var _this = this,
      addButton = function (type) {
        var nav = document.querySelector('nav'),
            button = document.createElement('a'),
            buttonSpan = document.createElement('span'),
            addFormOrCreate = function () {
              if (type === 'connect') {
                //  Check if form is not visible by now
                if (!Sigma.signIn.isVisible) {
                  //  Add aside element with form into the DOM
                  Sigma.signIn.init();
                  Sigma.signUp.init();
                  //  Hide nav
                  Sigma.navigation.hide();
                }
              } else {
                var title = 'An editable title!',
                    content = 'Here goes the content of your lovely article. You can directly drag & drop images here!';
                Sigma.disconnectObservers();
                Sigma.addContent(false, undefined, title, content, Sigma.username, true);
                Sigma.tools.attach();
                Sigma.resetAndHighlightUserArticles();
                Sigma.setObservers();
              }
            };
        button.setAttribute('href', '#');
        button.setAttribute('class', type);
        nav.lastChild.appendChild(button);
        button.appendChild(buttonSpan);
        buttonSpan.appendChild(document.createTextNode(type));
        Sigma.clickAndTouchListener.add(button, 'addFormOrCreate', addFormOrCreate);
      },
      removeButton = function (type) {
        var selector = '.'+type,
            button = document.querySelector(selector);
        if (button !== null) {
          Sigma.clickAndTouchListener.remove(button, 'addFormOrCreate');
          button.parentNode.removeChild(button);
        }
      };
      if (type) {
        //  Connect
        if (Sigma.connectOrCreateStatus === undefined || Sigma.connectOrCreateStatus !== true) {
          Sigma.connectOrCreateStatus = true;
          removeButton('create');
          addButton('connect');
        }
      } else {
        //  Create
        if (Sigma.connectOrCreateStatus === undefined || Sigma.connectOrCreateStatus !== false) {
          Sigma.connectOrCreateStatus = false;
          removeButton('connect');
          addButton('create');
        }
      }
};//  Sigma.contentEditing module

//  Add features for content editing
module.exports = {
  eraseIt : function (event) {
    var target = Sigma.contentEditing.target.current,
        mongoId = target.dataset.mongoId;
    target.parentNode.removeChild(target);
    //  Delete in mongoDB
    Sigma.socket.emit(Sigma.getChannelId, { action: 'delete', mongoId: mongoId });
  },
  addTools : function (event) {
    //  Create tools panel
    var _this = Sigma.contentEditing,
        toolsPanel = document.createElement('div'),
        close = document.createElement('a'),
        erase = document.createElement('a'),
        article = _this.setArticle(event.target);
    toolsPanel.setAttribute('class', 'tools');
    close.setAttribute('class', 'close');
    close.setAttribute('href', '#');
    close.setAttribute('data-tooltip', 'close');
    erase.setAttribute('class', 'erase');
    erase.setAttribute('href', '#');
    erase.setAttribute('data-tooltip', 'erase');
    article.appendChild(toolsPanel);
    toolsPanel.appendChild(close);
    toolsPanel.appendChild(erase);
    //  Attach eventListeners
    Sigma.clickAndTouchListener.add(close, 'removeTools', _this.removeTools);
    Sigma.clickAndTouchListener.add(erase, 'eraseIt', _this.eraseIt);
    //  Store target as former target for further use
    _this.formerTarget = event.target.parentNode;
  },
  manageTools : function (event) {
    var _this = Sigma.contentEditing,
        tools = document.querySelector('.tools');
    if (tools === null) {
      _this.addTools(event);
    } else {
      //  Locate the article in which tools are visible
      var article = _this.setArticle(tools);
      //  Then check if it's the same target
      if (_this.target.current !== article) {
        tools.parentNode.removeChild(tools);
        _this.addTools(event);
      }
      //  Remove eventListener then add it to the new target
      var erase = document.querySelector('.erase');
      Sigma.clickAndTouchListener.remove(erase, 'eraseIt');
      Sigma.clickAndTouchListener.add(erase, 'eraseIt', _this.eraseIt);
    }
  },
  removeTools : function () {
    var tools = document.querySelector('.tools');
    tools.parentNode.removeChild(tools);
  },
  setArticle : function (element) {
    //  Set article considering the fact that the browser can add divs in contenteditable elements
    var article;
    if (element.parentNode.dataset.structure !== 'article') {
      article = element.parentNode.parentNode;
    } else {
      article = element.parentNode;
    }
    return article;
  },
  editMode : function (event) {
    var target = event.target.parentNode;
    target.classList.toggle('editMode');
    //  Store target
    Sigma.contentEditing.target.add = target;
  },
  viewMode : function (event) {
    var target = event.target.parentNode;
    target.classList.remove('editMode');
    //  Update time
    target.querySelector('time').setAttribute('datetime', Sigma.date.html());
    target.querySelector('time').innerText = Sigma.date.now();
    //  Finally delete removed images by user
    Sigma.droppedImages.delete();
  },
  status : function (target, add) {
    var _this = this;
    //  Set add argument to be true by default
    add = add === undefined ? true : add;
    console.log(add);
    if (add) {
      console.log('add');
      console.log(target);
      //  Highlight articles with an edit icon - with firefox hack -
      target.addEventListener('focus', this.editMode, true);
      target.addEventListener('blur', this.viewMode, true);
      //  Add event listener
      Sigma.clickAndTouchListener.add(target, 'manageTools', _this.manageTools, true);
    } else {
      console.log('remove');
      console.log(target);
      //  Remove listeners
      target.removeEventListener('focus', this.editMode, true);
      target.removeEventListener('blur', this.viewMode, true);
      Sigma.clickAndTouchListener.remove(target, 'manageTools');
    }
  },
  target : {
    //  Targets are managed as an array, with current and former values
    history : [],
    set add (target) {
      this.history.push(target);
      //  Limit array size to 2 elements
      if (this.history.length > 2){
        this.history.shift();
      }
    },
    get add () {},
    get current () {
      return this.history[this.history.length - 1];
    },
    get former () {
      if (this.history.length === 2) {
        return this.history[0];
      } else {
        return null;
      }
    }
  }
};//  Sigma.date module

//  Date generator
module.exports = {
  //  Formated date
  now : function () {
    var currentDate = new Date(),
        hours = currentDate.getHours(),
        minutes = currentDate.getMinutes(),
        meridiem;
    //  Set meridiem and hours format
    if (hours < 12) {
      meridiem = 'am';
    } else {
      meridiem = 'pm';
      hours -= 12;
    }
    //  Fix minutes format
    if (minutes < 10) {
        minutes = '0' + minutes;
    }
    var displayDate = 'today ' + hours + ':' + minutes + ' ' + meridiem;
    return displayDate;
  },
  html : function () {
    return new Date().toISOString();
  }
};//  Sigma.deleteContent module

//  Delete content
module.exports = function (id) {
  var selector = '[data-mongo-id="' + id + '"]';
  var node = document.querySelector(selector);
  //  If id exists on the client
  if (node !== null) {
    node.parentNode.removeChild(node);
  }
};//  Sigma.disableMouseWheelAndTouchMove module

//  Enable or disable mousewheel and touchmove
module.exports = function (target, disable) {
  var preventDefault = function (event) {
    event.preventDefault();
  };
  if (disable) {
    target.addEventListener('mousewheel', preventDefault, false);
    target.addEventListener('touchmove', preventDefault, false);
  } else {
    target.removeEventListener('mousewheel', preventDefault, false);
    target.removeEventListener('touchmove', preventDefault, false);
  }
};//  Sigma.disconnectObservers module

//  Disconnecting observers on demand
module.exports = function () {
  if (Sigma.observers !== undefined) {
    Sigma.observers.forEach(function (observer) {
      observer.disconnect();
    });
  }
  //  Remove eventListeners too for memory leaks!
  var data = document.querySelectorAll('[data-sigma]');
  for (var i = 0; i < data.length; ++i) {
    data[i].removeEventListener('focus', Sigma.contentEditing.editMode, true);
    data[i].removeEventListener('blur', Sigma.contentEditing.viewMode, true);
  }
};//  Sigma.dragAndDrop module

//  Drag & drop events
module.exports = function () {
  //  Image resizing
  var resize = function (image, small) {
    var renderedCanvas = document.createElement('canvas'),
        renderedContext = renderedCanvas.getContext('2d'),
        data;
    if (small) {
      var circleDiameter = 120,
          templateCanvas = document.createElement('canvas'),
          templateContext = templateCanvas.getContext('2d'),
          sourceX,
          sourceY,
          sourceWidth,
          sourceHeight;
      //  Manage it as a square
      if (image.width > image.height) {
        sourceX = (image.width - image.height) / 2;
        sourceY = 0;
        sourceWidth = image.height;
        sourceHeight = sourceWidth;
      } else {
        if (image.height > image.width) {
          sourceX = 0;
          sourceY = (image.height - image.width) / 2;
          sourceWidth = image.width;
          sourceHeight = sourceWidth;
        } else {
          sourceX = sourceY = 0;
          sourceWidth = sourceHeight = image.width;
        }
      }
      renderedCanvas.width = renderedCanvas.height = circleDiameter;
      templateCanvas.width = templateCanvas.height = circleDiameter;
      templateContext.drawImage(image, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, circleDiameter, circleDiameter);
      renderedContext.clearRect(0, 0, circleDiameter, circleDiameter);
      renderedContext.beginPath();
      renderedContext.arc(circleDiameter/2, circleDiameter/2, (circleDiameter/2)-2, 0, Math.PI*2, true);
      renderedContext.fillStyle = renderedContext.createPattern(templateCanvas,'no-repeat');
      renderedContext.fill();
      //  Create gradient
      var gradient = renderedContext.createLinearGradient(0, 0, 0, 150);
      gradient.addColorStop(0, 'rgba(229, 86, 109, .7)');
      gradient.addColorStop(0.25, 'rgba(225, 98, 158, .7)');
      gradient.addColorStop(0.5, 'rgba(195, 104, 213, .7)');
      gradient.addColorStop(0.75, 'rgba(146, 94, 202, .7)');
      gradient.addColorStop(1, 'rgba(108, 83, 181, .7)');
      renderedContext.lineWidth = 2;
      renderedContext.strokeStyle = gradient;
      renderedContext.stroke();
      //  Data to return in png format
      data = renderedCanvas.toDataURL('image/png');
    } else {
      //  Large image
      var maxHeight = 600,
          maxWidth = 1000;
      if (image.width > maxWidth) {
        image.height *= (maxWidth / image.width);
        image.width = maxWidth;
      }
      if (image.height > maxHeight) {
        image.width *= (maxHeight / image.height);
        image.height = maxHeight;
      }
      renderedCanvas.width = image.width;
      renderedCanvas.height = image.height;
      renderedContext.clearRect(0, 0, renderedCanvas.width, renderedCanvas.height);
      renderedContext.drawImage(image, 0, 0, image.width, image.height);
      //  Data to return in jpg format
      data = renderedCanvas.toDataURL('image/jpeg', 0.7);
    }
    //  Then return generated data
    return data;
  };
  //  Handle image on drop event
  var appendImage = function (file, event) {
    if (file.type.match(/image.*/)) {
      var newImage = document.createElement('img'),
          reader = new FileReader();
      event.target.parentNode.querySelector('[data-sigma="content"]').appendChild(newImage);
      reader.readAsArrayBuffer(file);
      reader.onload = function (event) {
        window.URL = window.URL || window.webkitURL;
        var blob = new Blob([new Uint8Array(event.target.result)]),
            blobURL = window.URL.createObjectURL(blob),
            image = new Image();
        image.src = blobURL;
        image.onload = function () {
          //  Create new image into the DOM
          var mongoId = Sigma.getTempId(),
              appWidth = document.querySelector('[data-app-width]').dataset.appWidth,
              smallImage = resize(image, true),
              largeImage = resize(image, false);
          newImage.dataset.image = 'dropped';
          newImage.dataset.idType = 'tmp';
          newImage.dataset.mongoId = mongoId;
          if (appWidth === 'small') {
            newImage.dataset.imageWidth = 'small';
          } else {
            newImage.dataset.imageWidth = 'large';
          }
          //  Save new image source
          Sigma.storeImage(mongoId, smallImage, largeImage);
        };
      };
    }
  };
  //  Handle text on drop event
  var appendText = function () {
    var data = event.dataTransfer.getData('text/plain');
    event.target.textContent += ' '+data;
  };
  //  Dragenter event
  window.addEventListener('dragenter', function (event) {
    event.preventDefault();
    var isTargetable = event.target.hasAttribute('data-sigma') ? true : false;
    if (isTargetable) {
      event.target.focus();
    }
  }, false);
  //  Dragleave event
  window.addEventListener('dragleave', function (event) {
    event.preventDefault();
    var isTargetable = event.target.hasAttribute('data-sigma') ? true : false;
    if (isTargetable) {
      event.target.blur();
    }
  }, false);
  //  Dragover event
  window.addEventListener('dragover', function (event) {
    event.preventDefault();
  }, false);
  //  Drop event
  window.addEventListener('drop', function (event) {
    event.preventDefault();
    var fileData = event.dataTransfer.files,
        isTargetable = event.target.hasAttribute('data-sigma') ? true : false;
    if (isTargetable) {
      if (fileData.length !== 0) {
        //  Add files
        for (var i = 0; i < fileData.length; ++i) {
          appendImage(fileData[i], event);
        }
      } else {
        //  Add text only
        appendText();
      }
    }
    //  little hack: set the focus on the target for the sync process
    event.target.focus();
  }, false);
};//  Sigma.droppedImages module

//  Manage dropped images
module.exports = {
  //  Store images removed by the user in an array
  removedImageIds : [],
  //  Analyse mutations
  lookAtMutations : function (mutation) {
    var addedNodes = mutation.addedNodes,
        removedNodes = mutation.removedNodes,
        type = mutation.type,
        _this = this,
        checkIfModified = function (add, nodes) {
          var updateImageIds = function () {
            if (add) {
              _this.removedImageIds.splice(_this.removedImageIds.indexOf(nodes[i].dataset.mongoId), 1);
            } else {
              _this.removedImageIds.push(nodes[i].dataset.mongoId);
            }
          },
              countImages = function (i) {
                //  Check if the node is not pure text
                if (nodes[i].nodeName !== '#text') {
                  //  Update if the image is the node itself
                  if (nodes[i].hasAttribute('data-image')) {
                    updateImageIds();
                  }
                } else {
                  if (nodes[i].hasChildNodes()) {
                    //  If there are images as children
                    var images = nodes[i].querySelectorAll('[data-image]');
                    for (var j = 0; j < images.length; ++j) {
                      updateImageIds();
                    }
                  }
                }
              };
          //  Core process
          if (nodes.length > 0 && type === 'childList') {
            for (var i = 0; i < nodes.length; ++i) {
              countImages(i);
            }
          }
        };
    //  Check for both added and removed nodes
    checkIfModified(false, removedNodes);
    checkIfModified(true, addedNodes);
  },
  //  Delete images in mongoDB
  delete : function () {
    //  If there is one or more images to remove
    if (this.removedImageIds.length > 0) {
      Sigma.socket.emit('deleteImage', { ids: this.removedImageIds });
      //  For further updates
      this.updateImageArray();
    }
  },
  updateImageArray : function () {
    var _this = this;
    Sigma.socket.on('updateImageArray', function (data) {
      _this.removedImageIds = data.array;
    });
  }
};//  Sigma.getChannelId module

//  Collect channel id's
module.exports = function () {
  Sigma.socket.on('id', function (data) {
    Sigma.getChannelId = data.id;
    //  Then create a listener
    Sigma.listen();
  });
};//  Sigma.getHistory module

//  History sent by the server
module.exports = function () {
  Sigma.socket.on('history', function (data) {
    //  If not empty
    if (data.empty) {
      var title = 'Welcome here pioneer!',
          content = 'It seems that you are the very first person on that channel. Please sign in or sign up.';
      Sigma.addContent(false, undefined, title, content, 'generated by Sigma', false);
    } else {
      //  Populate main div with the DOM content sent by the server
      data.documents.forEach(function (document) {
        Sigma.addContent(document.html, document._id);
      });
    }
    //  Keep track of channel emptiness
    Sigma.asyncUserAndHistoryState.channelIsEmpty = data.empty;
    //  Check if localStorage module was loaded too and set argument for empty channel
    Sigma.asyncUserAndHistoryState.check();
    //  Get images sources
    Sigma.loadResponsiveImages();
  });
};//  Sigma.getMongoId module

//  Get mongoDB's id of new content
module.exports = function () {
  Sigma.socket.on('mongoId', function (data) {
    Sigma.changeId(data.tempId, data.id, data.type);
  });
};//  Sigma.getSocketMessage module

//  Receive message through websockets
module.exports = function () {
  Sigma.socket.on('socketMessage', function (data) {
    Sigma.manageMessage(true, data.message, data.type);
  });
};//  Sigma.getTempId module

//  Assign a temporary id to manage new content
module.exports = function () {
  var crypto = window.crypto.getRandomValues(new Uint32Array(8)),
      id = '';
  for (var i = 0; i < crypto.length; ++i) {
    id += crypto[i].toString(16);
    if (i < crypto.length - 1) {
      id += '-';
    }
  }
  return id;
};//  Sigma.heroHeader module

//  Add or remove header
module.exports = {
  add : function () {
    //  Add if not visible of first launch
    if (this.isVisible === undefined || !this.isVisible) {
      var body = document.querySelector('body'),
        main = document.querySelector('main'),
        hero = document.createElement('header'),
        title = document.createElement('h1');
      body.insertBefore(hero, main);
      hero.setAttribute('class', 'hero');
      hero.appendChild(title);
      title.appendChild(document.createTextNode('Create and share data in true real-time.'));
      this.isVisible = true;
    }
  },
  remove : function () {
    //  Remove only if visible
    if (this.isVisible === undefined || this.isVisible) {
      var hero = document.querySelector('header');
      hero.parentNode.removeChild(hero);
      this.isVisible = false;
    }
  }
};//  Sigma.isOnLine module

//  Get navigator online status
module.exports = function () {
  if ('onLine' in navigator) {
    return navigator.onLine;
  } else {
    return undefined;
  }
};//  Sigma.listen module

//  Listen changes sent by the server
module.exports = function () {
  Sigma.socket.on('broadcast', function (data) {
    Sigma.disconnectObservers();
    switch (data.action) {
      //  Add new content
      case 'create':
        Sigma.addContent(data.html, data.id);
        break;
      //  Update content
      case 'update':
        Sigma.updateContent(data.html, data.id);
        break;
      //  Delete content
      case 'delete':
        Sigma.deleteContent(data.id);
        break;
    }
    Sigma.setObservers();
    Sigma.loadResponsiveImages();
  });
};//  Sigma.loadResponsiveImages module

//  Load images on content update
module.exports = function () {
  var appWidth = document.querySelector('[data-app-width]'),
      responsiveImages = document.querySelectorAll('[data-image]'),
      loadSource = function (i) {
        //  Change data attribute
        responsiveImages[i].dataset.imageWidth = appWidth.dataset.appWidth;
        //  And inject source
        var source = Sigma.host+':'+Sigma.port+'/data/'+responsiveImages[i].dataset.mongoId+'/'+appWidth.dataset.appWidth;
        responsiveImages[i].setAttribute('src', source);
      };
  for (var i = 0; i < responsiveImages.length; ++i) {
    loadSource(i);
  }
};//  Sigma.makeOwnerArticlesEditable module

//  Make contenteditable set to true for the owner
module.exports = function () {
  //  Make contenteditable set to true if the user is the owner
  var data = document.querySelectorAll('[data-sigma]'),
      resetAndMakeEditable = function (i) {
        var owner = data[i].parentNode.querySelector('[data-owner]').dataset.owner;
        if (owner === Sigma.username) {
          data[i].contentEditable = 'true';
        } else {
          data[i].contentEditable = 'false';
        }
      };
  for (var i = 0; i < data.length; ++i) {
    resetAndMakeEditable(i);
  }
};//  Sigma.manageMessage module

//  Hide or show a message
module.exports = function (action, message, type) {
  var currentMessage = document.querySelector('[data-message]'),
      messageType = type ? 'confirmation' : 'alert',
      deleteMessage = function () {
        if (currentMessage) {
          currentMessage.parentNode.removeChild(currentMessage);
        }
      },
      updateOrCreateMessage = function () {
        if (currentMessage) {
          //  Update message
          currentMessage.dataset.message = messageType;
          currentMessage.innerHTML = message;
        } else {
          //  Create new message
          var newMessage = document.createElement('span'),
              eraseMessage = function (event) {
                var target = event.target,
                    removeMessage = function () {
                      target.parentNode.removeChild(target);
                    };
                target.classList.add('removeMessage');
                // Cross-browser event listeners
                Sigma.animationListener(true, target, removeMessage, true);
              };
          newMessage.dataset.message = messageType;
          newMessage.innerHTML = message;
          //  If message is added when there's no navigation
          if (!Sigma.navigation.visibility) {
            newMessage.classList.add('withNoNavigation');
          }
          //  Push changes to the DOM
          var body = document.querySelector('body');
          body.appendChild(newMessage);
          //  Add click event
          Sigma.clickAndTouchListener.add(newMessage, 'eraseMessage', eraseMessage);
        }
      };
  if (action) {
    updateOrCreateMessage();
  } else {
    deleteMessage();
  }
};//  Sigma.navigation module

//  Show or hide nav
module.exports = {
  //  Is visible by default
  visibility: true,
  hide : function () {
    var nav = document.querySelector('nav'),
        message = document.querySelector('[data-message]');
    nav.classList.add('removeNavigation');
    this.visibility = false;
    //  Make message stick on the bottom as there's no navigation
    if(message) {
      message.classList.add('withNoNavigation');
    }
  },
  show : function () {
    var nav = document.querySelector('nav'),
        message = document.querySelector('[data-message]');
    nav.classList.remove('removeNavigation');
    this.visibility = true;
    //  Make message back to default position
    if(message) {
      message.classList.remove('withNoNavigation');
    }
  }
};//  Sigma.observeWidth module

//  Simulate width observer with animationStart event for responsive image
module.exports = function () {
  var appWidth = document.querySelector('[data-app-width]'),
      responsiveImages,
      changeWidth = function (i) {
        //  Change data attribute
        responsiveImages[i].dataset.imageWidth = appWidth.dataset.appWidth;
        //  And inject source
        var source = Sigma.host+':'+Sigma.port+'/data/'+responsiveImages[i].dataset.mongoId+'/'+appWidth.dataset.appWidth;
        responsiveImages[i].setAttribute('src', source);
      },
      getWidth = function () {
        //  Retrieve content from ::after and set it as [data-app-width]
        var content = window.getComputedStyle(appWidth, '::after').getPropertyValue('content'),
            //  Little hack for Firefox which adds double quotes
            deviceWidth = content.replace(/\"/g, "");
        //  Sigma.deviceWith is define for further use
        appWidth.dataset.appWidth = Sigma.deviceWidth = deviceWidth;
        //  Adapt responsive images to screen
        responsiveImages = document.querySelectorAll('[data-image-width]');
        for (var i = 0; i < responsiveImages.length; ++i) {
          changeWidth(i);
        }
      };
  //  Cross-browser event listeners
  Sigma.animationListener(false, appWidth, getWidth, false);
};//  Sigma.preventPasting module

//  Paste processing
module.exports = function () {
  window.addEventListener('paste', function (event) {
    Sigma.manageMessage(true, 'Pasting is currently not supported due to cross-browser limitations. Use drag and drop instead.', false);
    event.preventDefault();
  }, false);
};//  Sigma.resetAndHighlightUserArticles module

//  Reset and highlight user's articles
module.exports = function () {
  var selector = '[data-owner="' + Sigma.username + '"]',
      articles = document.querySelectorAll(selector),
      articlesToReset = document.querySelectorAll('.isYours'),
      reset = function (i) {
        articlesToReset[i].classList.remove('isYours');
      },
      highlight = function (j) {
        articles[j].parentNode.classList.add('isYours');
      };
  //  Reset articles with .isYours class from former connection
  for (var i = 0; i < articlesToReset.length; ++i) {
    reset(i);
  }
  //  Then highlight user's articles
  for (var j = 0; j < articles.length; ++j) {
    highlight(j);
  }
};//  Sigma.saveManager module

//  Manage save state of articles
module.exports = {
  pool : [],
  init : function () {
    //  Receive save state
    Sigma.socket.on('saveState', function (data) {
      if (data.tempId !== undefined) {
        Sigma.saveManager.toggleState(data.tempId, data.state);
      } else {
        if (data.id !== undefined) {
          Sigma.saveManager.toggleState(data.id, data.state);
        }
      }
    });
  },
  add : function (id, state) {
    var index = this.find(id);
    if (index === null) {
      this.pool.push([id, state]);
    } else {
      this.pool[index][1] = state;
    }
  },
  find : function (id) {
    var selectIds = function (row) {
      return row[0];
    },
        index = this.pool.map(selectIds).indexOf(id);
    return index !== -1 ? index : null;
  },
  showSaveState : function () {
    console.log('S A V E D !!!');
  },
  toggleId : function (tempId, id) {
    //  Replace temporary id with new mongoDB id in pool
    var index = this.find(tempId);
    if (index !== null) {
      this.pool[index][0] = id;
    }
  },
  toggleState : function (id, state) {
    //  Change state
    var index = this.find(id);
    if (index !== null) {
      this.pool[index][1] = state;
      this.showSaveState();
    }
  }
};//  Sigma.setObservers module

//  Set observers
module.exports = function () {
  var MutationObserver = window.MutationObserver ||
                         window.WebKitMutationObserver ||
                         window.MozMutationObserver,
      observers = [],
      data = document.querySelectorAll('[data-sigma]'),
      //  Attach observers on selected nodes
      attachObserver = function (i) {
        observers[i] = new MutationObserver(function (mutations) {
          //  For each mutation into the DOM, sync content server-side
          mutations.forEach(function (mutation) {
            //  Synchronize
            Sigma.synchronize();
            Sigma.droppedImages.lookAtMutations(mutation);
          });
        });
        observers[i].observe(data[i], {
          attributes: true, 
          childList: true, 
          characterData: true,
          attributeOldValue: true,
          subtree: true,
          characterDataOldValue: true
        });
      };
  for (var i = 0; i < data.length; ++i) {
    attachObserver(i);
  }
  //  Save a list of observers
  Sigma.observers = observers;
};//  Sigma.signIn module

//  Manage a form to handle user sign-in process
module.exports = {
  addForm : function () {
    //  Create the form
    var _this = this,
        body = document.querySelector('body'),
        aside = document.createElement('aside'),
        form = document.createElement('form'),
        usernameDiv = document.createElement('div'),
        passwordDiv = document.createElement('div'),
        usernameLabel = document.createElement('label'),
        passwordLabel = document.createElement('label'),
        usernameInput = document.createElement('input'),
        passwordInput = document.createElement('input'),
        usernameSpan = document.createElement('span'),
        passwordSpan = document.createElement('span'),
        cancelButton = document.createElement('button'),
        returnHome = function (event) {
          var removeAside = function () {
            //  Remove from DOM at animation's end
            aside.parentNode.removeChild(aside);
          };
          // Cross-browser event listeners
          Sigma.animationListener(true, aside, removeAside, true);
          //  Launch aside slide animation
          aside.classList.add('removeAside');
          //  Make body scrollable again
          body.classList.remove('noScroll');
          //  Show nav again
          Sigma.navigation.show();
          //  Remove mousewheel and touchmove listeners
          Sigma.disableMouseWheelAndTouchMove(body, false);
          //  Set visibility
          _this.isVisible = false;
          //  Remove unclosed message if present
          Sigma.manageMessage(false);
        };
    form.setAttribute('class', 'signIn');
    form.setAttribute('data-validation', 'Username and password must be 6 characters long with no white space! Password must contain at least 1 digit!');
    usernameDiv.setAttribute('class', 'usernameUberInput');
    passwordDiv.setAttribute('class', 'passwordUberInput');
    usernameInput.setAttribute('class', 'username');
    usernameInput.setAttribute('type', 'text');
    usernameInput.setAttribute('placeholder', 'Username');
    usernameInput.setAttribute('autofocus', '');
    passwordInput.setAttribute('class', 'password');
    passwordInput.setAttribute('type', 'password');
    passwordInput.setAttribute('placeholder', 'Password');
    usernameSpan.setAttribute('id', 'usernameInputState');
    passwordSpan.setAttribute('id', 'passwordInputState');
    cancelButton.setAttribute('type', 'button');
    cancelButton.setAttribute('class', 'cancel');
    cancelButton.appendChild(document.createTextNode('cancel'));
    //  Remove scrolling
    body.classList.toggle('noScroll');
    //  Append it to the DOM
    body.insertBefore(aside, body.firstChild);
    aside.appendChild(form);
    form.appendChild(usernameDiv);
    form.appendChild(passwordDiv);
    usernameDiv.appendChild(usernameLabel);
    usernameDiv.appendChild(usernameInput);
    usernameDiv.appendChild(usernameSpan);
    passwordDiv.appendChild(passwordLabel);
    passwordDiv.appendChild(passwordInput);
    passwordDiv.appendChild(passwordSpan);
    form.appendChild(cancelButton);
    //  Append it to the main objet
    Sigma.signIn.form = form;
    //  Temporary disable wheel and touch
    Sigma.disableMouseWheelAndTouchMove(body, true);
    //body.addEventListener('mousewheel', disableMouseWheelOrTouchMove, false);
    //body.addEventListener('touchmove', disableMouseWheelOrTouchMove, false);
    Sigma.clickAndTouchListener.add(cancelButton, 'returnHome', returnHome);
  },
  checkForm : function (event) {
    var form = document.querySelector('form'),
        username = document.querySelector('.username').value,
        password = document.querySelector('.password').value,
        usernameSpan = document.querySelector('#usernameInputState'),
        passwordSpan = document.querySelector('#passwordInputState'),
        //  Username regex with length > 6 and no white space
        usernameRegex = new RegExp('^\\S{6,}$'),
        usernameIsOk = usernameRegex.test(username),
        //  Password regex with length > 6, no white space and at least one digit
        passwordRegex = new RegExp('^(?=.*\\d)\\S{6,}$'),
        passwordIsOk = passwordRegex.test(password),
        credentialsAreOk = usernameIsOk && passwordIsOk,
        validationMessage = '',
        toggleSubmitButtonVisibilityTo = function (state) {
          var buttonToRemove = document.querySelector('button[type=submit]');
          if (state) {
            if (!buttonToRemove) {
              var newButton = document.createElement('button');
              newButton.setAttribute('type', 'submit');
              newButton.appendChild(document.createTextNode('sign in | up'));
              Sigma.signIn.form.appendChild(newButton);
            }
          } else {
            if (!!buttonToRemove) {
              buttonToRemove.parentNode.removeChild(buttonToRemove);
            }
          }
        };
    if(credentialsAreOk) {
      //  Append username & password to the main objet
      Sigma.signIn.username = username;
      Sigma.signIn.password = password;
      //  Show that inputs are valid
      usernameSpan.className = passwordSpan.className = 'isOk';
      //  Remove previous validation message
      Sigma.manageMessage(false);
      //  Add submit button
      toggleSubmitButtonVisibilityTo(true);
    } else {
      //  Show inputs validity
      if (usernameIsOk) {
        if (username !== '') {
          usernameSpan.className = 'isOk';
        }
      } else {
        if (username !== '') {
          validationMessage += 'Username must be at least 6 characters long!';
          usernameSpan.className = 'isErroneous';
        } else {
          usernameSpan.className = '';
        }
      }
      if (passwordIsOk) {
        if (password !== '') {
          passwordSpan.className = 'isOk';
        }
      } else {
        if (password !== '') {
          if (validationMessage !== '') {
            validationMessage += ' ';
          }
          validationMessage += 'Password must be at least 6 characters long with one digit!';
          passwordSpan.className = 'isErroneous';
        } else {
          passwordSpan.className = '';
        }
      }
      //  Show message
      if (validationMessage !== '') {
        Sigma.manageMessage(true, validationMessage, false);
      } else {
        Sigma.manageMessage(false);
      }
      //  Remove submit button
      toggleSubmitButtonVisibilityTo(false);
    }
  },
  submit : function (event) {
    event.preventDefault();
    Sigma.socket.emit('signIn', { username: Sigma.signIn.username, password: Sigma.signIn.password });
  },
  init : function () {
    this.isVisible = true;
    this.addForm();
    this.form.addEventListener('input', this.checkForm, false);
    this.form.addEventListener('submit', this.submit, false);
  }
};//  Sigma.signUp module

//  Sign Up process
module.exports = {
  submit : function (event) {
    event.preventDefault();
    Sigma.socket.emit('signUp', { username: Sigma.signIn.username, password: Sigma.signIn.password });
  },
  init : function () {
    Sigma.socket.on('signUp', function (data) {
      Sigma.manageMessage(true, 'Unknown username! Want to sign up as '+data.username+'?', true);
      //  Update submit button
      var button = document.querySelector('button[type=submit]');
      button.innerText = 'sign up';
      button.classList.add('signUp');
      Sigma.signIn.form.removeEventListener('submit', Sigma.signIn.submit, false);
      Sigma.signIn.form.addEventListener('submit', Sigma.signUp.submit, false);
    });
  }
};//  Sigma.simpleCounter module

//  Simple counter
module.exports = {
  i: 0,
  get value() {
    ++this.i;
    return this.i;
  }
};//  Sigma.storeImage module

//  Store image in mongoDB
module.exports = function (tempId, smallImage, largeImage) {
  Sigma.socket.emit('storeImage', { tempId: tempId, smallImage: smallImage, largeImage: largeImage });
};//  Sigma.synchronize module

//  Sync process
module.exports = function () {
  //  Look at active element
  var article = document.activeElement.parentNode,
      isArticleNode = article.nodeName === 'ARTICLE',
      isArticleInDataset = article.dataset.structure === 'article';
  //  Only synchronize with valid articles
  if (isArticleNode && isArticleInDataset) {
    console.log(article);
    var articleClone = article.cloneNode(true),
        articleFragment = document.createDocumentFragment(),
        mongoId,
        tools,
        articleHTML,
        images,
        makeImagesNeutral = function (i) {
          //  Reset image's source
          images[i].removeAttribute('src');
          //  Remove responsive data
          images[i].removeAttribute('data-image-width');
        },
        makeReadOnly = function (j) {
          //  Make all Sigma attributes with contenteditable set to false
          editableElements[j].contentEditable = 'false';
        };
    //  Inject article into empty clone
    articleFragment.appendChild(articleClone);
    //  Select tools into the clone
    tools = articleFragment.querySelector('.tools');
    //  Then remove it if present
    if ( tools !== null) {
      tools.parentNode.removeChild(tools);
    }
    //  Make responsives images neutral
    images = articleFragment.querySelectorAll('[data-image-width]');
    for (var i = 0; i < images.length; ++i) {
      makeImagesNeutral(i);
    }
    //  Make contenteditable set to false
    editableElements = articleFragment.querySelectorAll('[data-sigma]');
    for (var j = 0; j < editableElements.length; ++j) {
      makeReadOnly(j);
    }
    //  Convert it
    articleHTML = articleFragment.querySelector('[data-structure="article"]').innerHTML;
    //  Process it
    if (document.hasFocus()) {
      //  Check if div has a mongo id attribute => update content
      if (article.hasAttribute('data-mongo-id')) {
        if (article.dataset.idType === 'const') {
          //  Id is from mongo
          mongoId = article.dataset.mongoId;
          Sigma.socket.emit(Sigma.getChannelId, { action: 'update', mongoId: mongoId, html: articleHTML, owner: Sigma.username });
        } else {
          //  Id is a temporary one

          //  !!!!!!!!!!!!!!!!!!!!

          console.log('berp');
        }
      } else {
        //  Create new content
        article.dataset.idType = 'tmp';
        mongoId = Sigma.getTempId();
        article.dataset.mongoId = mongoId;
        Sigma.socket.emit(Sigma.getChannelId, { action: 'create', mongoId: mongoId, html: articleHTML, owner: Sigma.username });
      }
      //  Add save state for the article
      Sigma.saveManager.add(mongoId, false);
    }
  }
};//  Sigma.tools module

//  Attach or remove edit icon
module.exports = {
  attach : function () {
    var data = document.querySelectorAll('[data-sigma]'),
        attachTools = function (i) {
          var owner = data[i].parentNode.querySelector('[data-owner]').dataset.owner;
          if (Sigma.username === owner) {
            Sigma.contentEditing.status(data[i]);
          }
        };
    for (var i = 0; i < data.length; ++i) {
      attachTools(i);
    }
  },
  remove : function () {
    var data = document.querySelectorAll('[data-sigma]');
    for (var j = 0; j < data.length; ++j) {
      Sigma.contentEditing.status(data[j], false);
    }
  }
};//  Sigma.tryLocalStorage module

//  Try if localStorage is supported by the browser
module.exports = {
  changeUserInterfaceToSign : function () {
    //  Reset and highlight user's articles
    Sigma.resetAndHighlightUserArticles();
    //  Provide a form to sign in and to sign up
    Sigma.connectOrCreateButton(true);
    //  Add Hero header
    Sigma.heroHeader.add();
    //  Enable user connection
    Sigma.userIsConnected();
    //  Set observers
    Sigma.setObservers();
  },
  checkStorageState : function (event) {
    //  Check storage state in realtime
    Sigma.tryLocalStorage.clearStorage();
    Sigma.manageMessage(true, 'Unwanted LocalStorage change occured. LocalStorage has been cleared.', false);
    Sigma.tryLocalStorage.changeUserInterfaceToSign();
  },
  clearStorage : function () {
    //  Clear app local storage
    var _this = this;
    window.removeEventListener('storage', _this.checkStorageState, false);
    localStorage.clear();
    window.addEventListener('storage', _this.checkStorageState, false);
    Sigma.username = undefined;
    Sigma.tools.remove();
    Sigma.makeOwnerArticlesEditable();
  },
  init : function () {
    if ('localStorage' in window) {
      var _this = this,
          localData = localStorage.sigma === undefined ? { username: undefined, password: undefined } : JSON.parse(localStorage.sigma);
      //  Add listener on storage
      window.addEventListener('storage', _this.checkStorageState, false);
      //  Server response for localStorage's credentials
      Sigma.socket.on('localStorageState', function (data) {
        if (data.secure) {
          window.removeEventListener('storage', _this.checkStorageState, false);
          //  Save username into the app
          Sigma.username = localData.username;
          window.addEventListener('storage', _this.checkStorageState, false);
          //  Check if history module was loaded too
          Sigma.asyncUserAndHistoryState.check();
        } else {
          _this.clearStorage();
          Sigma.manageMessage(true, 'Wrong credentials were stored in local browser. Please sign in or sign up!', false);
          _this.changeUserInterfaceToSign();
        }
      });
      //  Send collected credentials
      if (localData.username !== undefined && localData.password !== undefined) {
        Sigma.socket.emit('checkLocalStorage', { username: localData.username, password: localData.password });
      } else {
        _this.clearStorage();
        _this.changeUserInterfaceToSign();
      }
    } else {
      Sigma.manageMessage(true, 'LocalStorage is not supported!', false);
    }
  }
};//  Sigma.updateContent module

//  Update content
module.exports = function (html, id) {
  var selector = '[data-mongo-id="' + id + '"]',
      node = document.querySelector(selector);
  //  If id exists on the client
  if (node !== null) {
    node.innerHTML = html;
  }
};//  Sigma.userIsConnected module

//  Manage user connection
module.exports = function () {
  Sigma.socket.on('isConnected', function (data) {
    var aside = document.querySelector('aside'),
        body = document.querySelector('body'),
        //  Remove aside
        returnHome = function () {
          var removeAside = function () {
            //  Remove from DOM at animation's end
            console.log(aside);
            if (aside !== null) {
              aside.parentNode.removeChild(aside);
            }
          };
          // Cross-browser event listeners
          Sigma.animationListener(true, aside, removeAside, true);
          //  Launch aside slide animation
          aside.classList.add('removeAside');
          //  Make body scrollable again
          body.classList.remove('noScroll');
          //  Show nav again
          Sigma.navigation.show();
          //  Remove listeners
          Sigma.disableMouseWheelAndTouchMove(body, false);
          //  Set form visibility
          Sigma.signIn.isVisible = false;
          //  Remove unclosed message if present
          Sigma.manageMessage(false);
        };
    //  Return home
    returnHome();
    //  Save username into the app
    Sigma.username = data.username;
    //  Try to use localStorage
    if ('localStorage' in window) {
      //  Store data as JSON
      localStorage.sigma = JSON.stringify({username : Sigma.username, password : data.password});
    } else {
      Sigma.manageMessage(true, 'LocalStorage is not supported!', false);
    }
    //  Check if history module was loaded too
    Sigma.asyncUserAndHistoryState.check();
    console.log('userIsConnected');
    //  Remove Hero header
    Sigma.heroHeader.remove();
  });
};
},{"./modules/addContent.js":2,"./modules/animationListener.js":3,"./modules/asyncUserAndHistoryState.js":4,"./modules/changeId.js":5,"./modules/clickAndTouchListener.js":6,"./modules/connectOrCreateButton.js":7,"./modules/contentEditing.js":8,"./modules/date.js":9,"./modules/deleteContent.js":10,"./modules/disableMouseWheelAndTouchMove.js":11,"./modules/disconnectObservers.js":12,"./modules/dragAndDrop.js":13,"./modules/droppedImages.js":14,"./modules/getChannelId.js":15,"./modules/getHistory.js":16,"./modules/getMongoId.js":17,"./modules/getSocketMessage.js":18,"./modules/getTempId.js":19,"./modules/heroHeader.js":20,"./modules/isOnLine.js":21,"./modules/listen.js":22,"./modules/loadResponsiveImages.js":23,"./modules/makeOwnerArticlesEditable.js":24,"./modules/manageMessage.js":25,"./modules/navigation.js":26,"./modules/observeWidth.js":27,"./modules/preventPasting.js":28,"./modules/resetAndHighlightUserArticles.js":29,"./modules/saveManager.js":30,"./modules/setObservers.js":31,"./modules/signIn.js":32,"./modules/signUp.js":33,"./modules/simpleCounter.js":34,"./modules/storeImage.js":35,"./modules/synchronize.js":36,"./modules/tools.js":37,"./modules/tryLocalStorage.js":38,"./modules/updateContent.js":39,"./modules/userIsConnected.js":40}],2:[function(require,module,exports){
//  Sigma.addContent module

//  New content generator
module.exports = function (html, id, title, content, owner, editable) {
  var main = document.querySelector('main'),
      firstRow = main.querySelector('.row:first-child'),
      cellsInFirstRow = firstRow !== null ? firstRow.children.length : 0,
      newArticle = document.createElement('article');
  newArticle.setAttribute('data-structure', 'article');
  newArticle.setAttribute('class', 'cell');
  //  Create article from scratch or inject content from database
  if (!html) {
    //  Create new h1 for title
    var newTitle = document.createElement('h1');
    newTitle.setAttribute('data-sigma', 'title');
    newTitle.setAttribute('contenteditable', editable);
    newTitle.appendChild(document.createTextNode(title));
    //  Create new h2 for user
    var newOwner = document.createElement('h2');
    newOwner.setAttribute('data-owner', owner);
    newOwner.appendChild(document.createTextNode(owner));
    //  Create new date
    var newDate = document.createElement('time');
    newDate.appendChild(document.createTextNode(Sigma.date.now()));
    newDate.setAttribute('datetime', Sigma.date.html());
    //  Create new p for content
    var newContent = document.createElement('article');
    newContent.setAttribute('data-sigma', 'content');
    newContent.setAttribute('contenteditable', editable);
    newContent.appendChild(document.createTextNode(content));
    //  Append childs in article
    newArticle.appendChild(newTitle);
    newArticle.appendChild(newOwner);
    newArticle.appendChild(newDate);
    newArticle.appendChild(newContent);
  } else {
    //  Assign id
    newArticle.dataset.idType = 'const';
    newArticle.dataset.mongoId = id;
    //  Inject content
    newArticle.innerHTML = html;
  }
  //  Add article to a new row or to the first one
  if (cellsInFirstRow === 0 || cellsInFirstRow === 3) {
    //  Add new row
    var newRow = document.createElement('div');
    newRow.setAttribute('class', 'row');
    main.insertBefore(newRow, main.firstChild);
    //  Then add new article
    newRow.appendChild(newArticle);
  } else {
    firstRow.insertBefore(newArticle, firstRow.firstChild);
  }
};
},{}],3:[function(require,module,exports){
//  Sigma.animationListener module

//  Cross-browser animation listener
module.exports = function (state, target, action, removeWhenDone) {
  //  State is false = animationstart | true = animationend
  var vendorPrefixes = ['animation', 'webkitAnimation', 'MSAnimation', 'oAnimation'],
      addState = function (prefix) {
        return prefix + (prefix === 'animation' ? (state ? 'end' : 'start') : (state ? 'End' : 'Start'));
      },
      animationListeners = vendorPrefixes.map(addState),
      actionAndRemoveListeners = function () {
        //  Launch requested action
        var _this = this;
        action();
        //  Remove animation listeners if wanted
        if (removeWhenDone) {
          animationListeners.forEach(function (animation) {
            _this.removeEventListener(animation, actionAndRemoveListeners, false);
          });
        }
      };
  //  Add cross-browser animation listeners based on state
  animationListeners.forEach(function (animation) {
    target.addEventListener(animation, actionAndRemoveListeners, false);
  });
};
},{}],4:[function(require,module,exports){
//  Sigma.asyncUserAndHistoryState module

//  We need to know that both getHistory module and tryLocalStorage/userIsConnected module are completed
module.exports = {
  modulesLoaded: 0,
  makeLiveForUser : function () {
    var _this = this;
    //  Disconnect observers
    Sigma.disconnectObservers();
    //  Check if channel was empty and populate it with a first post
    if (_this.channelIsEmpty) {
      var node = document.querySelector('[data-owner="generated by Sigma"]').parentNode;
      //  If node exists on the client
      if (node !== null) {
        //  Remove it
        node.parentNode.removeChild(node);
        //  Then add a new editable one for the user
        var title = 'Welcome here '+Sigma.username+' !',
            content = 'It seems that you are the very first person on that channel. Try to edit the title and the content of this article!';
        Sigma.addContent(false, undefined, title, content, Sigma.username, true);
      }
    }
    //  Set owner's articles as editable
    Sigma.makeOwnerArticlesEditable();
    //  Attach tools
    Sigma.tools.attach();
    //  Add create button
    Sigma.connectOrCreateButton(false);
    //  Reset and highlight user's articles
    Sigma.resetAndHighlightUserArticles();
    //  Set observers
    Sigma.setObservers();
    //  Welcome user
    Sigma.manageMessage(true, 'Hi '+Sigma.username+'! Nice to see you there!', true);
  },
  check : function () {
    //  Increment when called
    ++this.modulesLoaded;
    //  If two calls occured at least
    if (this.modulesLoaded >= 2) {
      this.makeLiveForUser();
    }
  }
};
},{}],5:[function(require,module,exports){
//  Sigma.changeId module

// Change tempId to mongoId
module.exports = function (tempId, id, type) {
  var selector = '[data-mongo-id="'+tempId+'"]',
      appWidth = document.querySelector('[data-app-width]'),
      node = document.querySelector(selector),
      html = node.innerHTML;
  node.dataset.idType = 'const';
  node.dataset.mongoId = id;
  //  Then update for other clients as changes may have occured meanwhile
  switch (type) {
    //  Articles
    case 'article':
      Sigma.socket.emit(Sigma.getChannelId, { action: 'update', mongoId: id, html: html, owner: Sigma.username });
      break;
    //  Images
    case 'image':
      node.src = Sigma.host+':'+Sigma.port+'/data/'+id+'/'+appWidth.dataset.appWidth;
      break;
  }
};
},{}],6:[function(require,module,exports){
//  Sigma.clickAndTouchListener module

//  Device-agnostic click and touch add or remove listeners
module.exports = {
  functions : {},
  preventClickIfTouch : function (event) {
    if (event.type === 'touchstart') {
      event.preventDefault();
    }
  },
  add : function (target, functionName, functionCode, disablePreventClickIfTouch) {
    var _this = this,
        code = functionCode;
    //  DisablePreventClickIfTouch is optional and set to false by default - trick for contenteditable
    disablePreventClickIfTouch = disablePreventClickIfTouch || false;
    //  Store code to execute in functions object
    _this.functions[functionName] = function (event) {
      //  If event is touchstart we prevent the click event from firing
      if(!disablePreventClickIfTouch) {
        _this.preventClickIfTouch(event);
      }
      //  Then we execute function code
      code(event);
    };
    //  As we can't detect if the device use click or touch events, we use both!
    target.addEventListener('click', _this.functions[functionName], false);
    target.addEventListener('touchstart', _this.functions[functionName], false);
  },
  remove : function (target, functionName) {
    var _this = this;
    target.removeEventListener('click', _this.functions[functionName], false);
    target.removeEventListener('touchstart', _this.functions[functionName], false);
  }
};
},{}],7:[function(require,module,exports){
//  Sigma.connectOrCreateButton module

//  Add connect or create button in nav
module.exports = function (type) {
  //  Connect is true | Create is false
  var _this = this,
      addButton = function (type) {
        var nav = document.querySelector('nav'),
            button = document.createElement('a'),
            buttonSpan = document.createElement('span'),
            addFormOrCreate = function () {
              if (type === 'connect') {
                //  Check if form is not visible by now
                if (!Sigma.signIn.isVisible) {
                  //  Add aside element with form into the DOM
                  Sigma.signIn.init();
                  Sigma.signUp.init();
                  //  Hide nav
                  Sigma.navigation.hide();
                }
              } else {
                var title = 'An editable title!',
                    content = 'Here goes the content of your lovely article. You can directly drag & drop images here!';
                Sigma.disconnectObservers();
                Sigma.addContent(false, undefined, title, content, Sigma.username, true);
                Sigma.tools.attach();
                Sigma.resetAndHighlightUserArticles();
                Sigma.setObservers();
              }
            };
        button.setAttribute('href', '#');
        button.setAttribute('class', type);
        nav.lastChild.appendChild(button);
        button.appendChild(buttonSpan);
        buttonSpan.appendChild(document.createTextNode(type));
        Sigma.clickAndTouchListener.add(button, 'addFormOrCreate', addFormOrCreate);
      },
      removeButton = function (type) {
        var selector = '.'+type,
            button = document.querySelector(selector);
        if (button !== null) {
          Sigma.clickAndTouchListener.remove(button, 'addFormOrCreate');
          button.parentNode.removeChild(button);
        }
      };
      if (type) {
        //  Connect
        if (Sigma.connectOrCreateStatus === undefined || Sigma.connectOrCreateStatus !== true) {
          Sigma.connectOrCreateStatus = true;
          removeButton('create');
          addButton('connect');
        }
      } else {
        //  Create
        if (Sigma.connectOrCreateStatus === undefined || Sigma.connectOrCreateStatus !== false) {
          Sigma.connectOrCreateStatus = false;
          removeButton('connect');
          addButton('create');
        }
      }
};
},{}],8:[function(require,module,exports){
//  Sigma.contentEditing module

//  Add features for content editing
module.exports = {
  eraseIt : function (event) {
    var target = Sigma.contentEditing.target.current,
        mongoId = target.dataset.mongoId;
    target.parentNode.removeChild(target);
    //  Delete in mongoDB
    Sigma.socket.emit(Sigma.getChannelId, { action: 'delete', mongoId: mongoId });
  },
  addTools : function (event) {
    //  Create tools panel
    var _this = Sigma.contentEditing,
        toolsPanel = document.createElement('div'),
        close = document.createElement('a'),
        erase = document.createElement('a'),
        article = _this.setArticle(event.target);
    toolsPanel.setAttribute('class', 'tools');
    close.setAttribute('class', 'close');
    close.setAttribute('href', '#');
    close.setAttribute('data-tooltip', 'close');
    erase.setAttribute('class', 'erase');
    erase.setAttribute('href', '#');
    erase.setAttribute('data-tooltip', 'erase');
    article.appendChild(toolsPanel);
    toolsPanel.appendChild(close);
    toolsPanel.appendChild(erase);
    //  Attach eventListeners
    Sigma.clickAndTouchListener.add(close, 'removeTools', _this.removeTools);
    Sigma.clickAndTouchListener.add(erase, 'eraseIt', _this.eraseIt);
    //  Store target as former target for further use
    _this.formerTarget = event.target.parentNode;
  },
  manageTools : function (event) {
    var _this = Sigma.contentEditing,
        tools = document.querySelector('.tools');
    if (tools === null) {
      _this.addTools(event);
    } else {
      //  Locate the article in which tools are visible
      var article = _this.setArticle(tools);
      //  Then check if it's the same target
      if (_this.target.current !== article) {
        tools.parentNode.removeChild(tools);
        _this.addTools(event);
      }
      //  Remove eventListener then add it to the new target
      var erase = document.querySelector('.erase');
      Sigma.clickAndTouchListener.remove(erase, 'eraseIt');
      Sigma.clickAndTouchListener.add(erase, 'eraseIt', _this.eraseIt);
    }
  },
  removeTools : function () {
    var tools = document.querySelector('.tools');
    tools.parentNode.removeChild(tools);
  },
  setArticle : function (element) {
    //  Set article considering the fact that the browser can add divs in contenteditable elements
    var article;
    if (element.parentNode.dataset.structure !== 'article') {
      article = element.parentNode.parentNode;
    } else {
      article = element.parentNode;
    }
    return article;
  },
  editMode : function (event) {
    var target = event.target.parentNode;
    target.classList.toggle('editMode');
    //  Store target
    Sigma.contentEditing.target.add = target;
  },
  viewMode : function (event) {
    var target = event.target.parentNode;
    target.classList.remove('editMode');
    //  Update time
    target.querySelector('time').setAttribute('datetime', Sigma.date.html());
    target.querySelector('time').innerText = Sigma.date.now();
    //  Finally delete removed images by user
    Sigma.droppedImages.delete();
  },
  status : function (target, add) {
    var _this = this;
    //  Set add argument to be true by default
    add = add === undefined ? true : add;
    console.log(add);
    if (add) {
      console.log('add');
      console.log(target);
      //  Highlight articles with an edit icon - with firefox hack -
      target.addEventListener('focus', this.editMode, true);
      target.addEventListener('blur', this.viewMode, true);
      //  Add event listener
      Sigma.clickAndTouchListener.add(target, 'manageTools', _this.manageTools, true);
    } else {
      console.log('remove');
      console.log(target);
      //  Remove listeners
      target.removeEventListener('focus', this.editMode, true);
      target.removeEventListener('blur', this.viewMode, true);
      Sigma.clickAndTouchListener.remove(target, 'manageTools');
    }
  },
  target : {
    //  Targets are managed as an array, with current and former values
    history : [],
    set add (target) {
      this.history.push(target);
      //  Limit array size to 2 elements
      if (this.history.length > 2){
        this.history.shift();
      }
    },
    get add () {},
    get current () {
      return this.history[this.history.length - 1];
    },
    get former () {
      if (this.history.length === 2) {
        return this.history[0];
      } else {
        return null;
      }
    }
  }
};
},{}],9:[function(require,module,exports){
//  Sigma.date module

//  Date generator
module.exports = {
  //  Formated date
  now : function () {
    var currentDate = new Date(),
        hours = currentDate.getHours(),
        minutes = currentDate.getMinutes(),
        meridiem;
    //  Set meridiem and hours format
    if (hours < 12) {
      meridiem = 'am';
    } else {
      meridiem = 'pm';
      hours -= 12;
    }
    //  Fix minutes format
    if (minutes < 10) {
        minutes = '0' + minutes;
    }
    var displayDate = 'today ' + hours + ':' + minutes + ' ' + meridiem;
    return displayDate;
  },
  html : function () {
    return new Date().toISOString();
  }
};
},{}],10:[function(require,module,exports){
//  Sigma.deleteContent module

//  Delete content
module.exports = function (id) {
  var selector = '[data-mongo-id="' + id + '"]';
  var node = document.querySelector(selector);
  //  If id exists on the client
  if (node !== null) {
    node.parentNode.removeChild(node);
  }
};
},{}],11:[function(require,module,exports){
//  Sigma.disableMouseWheelAndTouchMove module

//  Enable or disable mousewheel and touchmove
module.exports = function (target, disable) {
  var preventDefault = function (event) {
    event.preventDefault();
  };
  if (disable) {
    target.addEventListener('mousewheel', preventDefault, false);
    target.addEventListener('touchmove', preventDefault, false);
  } else {
    target.removeEventListener('mousewheel', preventDefault, false);
    target.removeEventListener('touchmove', preventDefault, false);
  }
};
},{}],12:[function(require,module,exports){
//  Sigma.disconnectObservers module

//  Disconnecting observers on demand
module.exports = function () {
  if (Sigma.observers !== undefined) {
    Sigma.observers.forEach(function (observer) {
      observer.disconnect();
    });
  }
  //  Remove eventListeners too for memory leaks!
  var data = document.querySelectorAll('[data-sigma]');
  for (var i = 0; i < data.length; ++i) {
    data[i].removeEventListener('focus', Sigma.contentEditing.editMode, true);
    data[i].removeEventListener('blur', Sigma.contentEditing.viewMode, true);
  }
};
},{}],13:[function(require,module,exports){
//  Sigma.dragAndDrop module

//  Drag & drop events
module.exports = function () {
  //  Image resizing
  var resize = function (image, small) {
    var renderedCanvas = document.createElement('canvas'),
        renderedContext = renderedCanvas.getContext('2d'),
        data;
    if (small) {
      var circleDiameter = 120,
          templateCanvas = document.createElement('canvas'),
          templateContext = templateCanvas.getContext('2d'),
          sourceX,
          sourceY,
          sourceWidth,
          sourceHeight;
      //  Manage it as a square
      if (image.width > image.height) {
        sourceX = (image.width - image.height) / 2;
        sourceY = 0;
        sourceWidth = image.height;
        sourceHeight = sourceWidth;
      } else {
        if (image.height > image.width) {
          sourceX = 0;
          sourceY = (image.height - image.width) / 2;
          sourceWidth = image.width;
          sourceHeight = sourceWidth;
        } else {
          sourceX = sourceY = 0;
          sourceWidth = sourceHeight = image.width;
        }
      }
      renderedCanvas.width = renderedCanvas.height = circleDiameter;
      templateCanvas.width = templateCanvas.height = circleDiameter;
      templateContext.drawImage(image, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, circleDiameter, circleDiameter);
      renderedContext.clearRect(0, 0, circleDiameter, circleDiameter);
      renderedContext.beginPath();
      renderedContext.arc(circleDiameter/2, circleDiameter/2, (circleDiameter/2)-2, 0, Math.PI*2, true);
      renderedContext.fillStyle = renderedContext.createPattern(templateCanvas,'no-repeat');
      renderedContext.fill();
      //  Create gradient
      var gradient = renderedContext.createLinearGradient(0, 0, 0, 150);
      gradient.addColorStop(0, 'rgba(229, 86, 109, .7)');
      gradient.addColorStop(0.25, 'rgba(225, 98, 158, .7)');
      gradient.addColorStop(0.5, 'rgba(195, 104, 213, .7)');
      gradient.addColorStop(0.75, 'rgba(146, 94, 202, .7)');
      gradient.addColorStop(1, 'rgba(108, 83, 181, .7)');
      renderedContext.lineWidth = 2;
      renderedContext.strokeStyle = gradient;
      renderedContext.stroke();
      //  Data to return in png format
      data = renderedCanvas.toDataURL('image/png');
    } else {
      //  Large image
      var maxHeight = 600,
          maxWidth = 1000;
      if (image.width > maxWidth) {
        image.height *= (maxWidth / image.width);
        image.width = maxWidth;
      }
      if (image.height > maxHeight) {
        image.width *= (maxHeight / image.height);
        image.height = maxHeight;
      }
      renderedCanvas.width = image.width;
      renderedCanvas.height = image.height;
      renderedContext.clearRect(0, 0, renderedCanvas.width, renderedCanvas.height);
      renderedContext.drawImage(image, 0, 0, image.width, image.height);
      //  Data to return in jpg format
      data = renderedCanvas.toDataURL('image/jpeg', 0.7);
    }
    //  Then return generated data
    return data;
  };
  //  Handle image on drop event
  var appendImage = function (file, event) {
    if (file.type.match(/image.*/)) {
      var newImage = document.createElement('img'),
          reader = new FileReader();
      event.target.parentNode.querySelector('[data-sigma="content"]').appendChild(newImage);
      reader.readAsArrayBuffer(file);
      reader.onload = function (event) {
        window.URL = window.URL || window.webkitURL;
        var blob = new Blob([new Uint8Array(event.target.result)]),
            blobURL = window.URL.createObjectURL(blob),
            image = new Image();
        image.src = blobURL;
        image.onload = function () {
          //  Create new image into the DOM
          var mongoId = Sigma.getTempId(),
              appWidth = document.querySelector('[data-app-width]').dataset.appWidth,
              smallImage = resize(image, true),
              largeImage = resize(image, false);
          newImage.dataset.image = 'dropped';
          newImage.dataset.idType = 'tmp';
          newImage.dataset.mongoId = mongoId;
          if (appWidth === 'small') {
            newImage.dataset.imageWidth = 'small';
          } else {
            newImage.dataset.imageWidth = 'large';
          }
          //  Save new image source
          Sigma.storeImage(mongoId, smallImage, largeImage);
        };
      };
    }
  };
  //  Handle text on drop event
  var appendText = function () {
    var data = event.dataTransfer.getData('text/plain');
    event.target.textContent += ' '+data;
  };
  //  Dragenter event
  window.addEventListener('dragenter', function (event) {
    event.preventDefault();
    var isTargetable = event.target.hasAttribute('data-sigma') ? true : false;
    if (isTargetable) {
      event.target.focus();
    }
  }, false);
  //  Dragleave event
  window.addEventListener('dragleave', function (event) {
    event.preventDefault();
    var isTargetable = event.target.hasAttribute('data-sigma') ? true : false;
    if (isTargetable) {
      event.target.blur();
    }
  }, false);
  //  Dragover event
  window.addEventListener('dragover', function (event) {
    event.preventDefault();
  }, false);
  //  Drop event
  window.addEventListener('drop', function (event) {
    event.preventDefault();
    var fileData = event.dataTransfer.files,
        isTargetable = event.target.hasAttribute('data-sigma') ? true : false;
    if (isTargetable) {
      if (fileData.length !== 0) {
        //  Add files
        for (var i = 0; i < fileData.length; ++i) {
          appendImage(fileData[i], event);
        }
      } else {
        //  Add text only
        appendText();
      }
    }
    //  little hack: set the focus on the target for the sync process
    event.target.focus();
  }, false);
};
},{}],14:[function(require,module,exports){
//  Sigma.droppedImages module

//  Manage dropped images
module.exports = {
  //  Store images removed by the user in an array
  removedImageIds : [],
  //  Analyse mutations
  lookAtMutations : function (mutation) {
    var addedNodes = mutation.addedNodes,
        removedNodes = mutation.removedNodes,
        type = mutation.type,
        _this = this,
        checkIfModified = function (add, nodes) {
          var updateImageIds = function () {
            if (add) {
              _this.removedImageIds.splice(_this.removedImageIds.indexOf(nodes[i].dataset.mongoId), 1);
            } else {
              _this.removedImageIds.push(nodes[i].dataset.mongoId);
            }
          },
              countImages = function (i) {
                //  Check if the node is not pure text
                if (nodes[i].nodeName !== '#text') {
                  //  Update if the image is the node itself
                  if (nodes[i].hasAttribute('data-image')) {
                    updateImageIds();
                  }
                } else {
                  if (nodes[i].hasChildNodes()) {
                    //  If there are images as children
                    var images = nodes[i].querySelectorAll('[data-image]');
                    for (var j = 0; j < images.length; ++j) {
                      updateImageIds();
                    }
                  }
                }
              };
          //  Core process
          if (nodes.length > 0 && type === 'childList') {
            for (var i = 0; i < nodes.length; ++i) {
              countImages(i);
            }
          }
        };
    //  Check for both added and removed nodes
    checkIfModified(false, removedNodes);
    checkIfModified(true, addedNodes);
  },
  //  Delete images in mongoDB
  delete : function () {
    //  If there is one or more images to remove
    if (this.removedImageIds.length > 0) {
      Sigma.socket.emit('deleteImage', { ids: this.removedImageIds });
      //  For further updates
      this.updateImageArray();
    }
  },
  updateImageArray : function () {
    var _this = this;
    Sigma.socket.on('updateImageArray', function (data) {
      _this.removedImageIds = data.array;
    });
  }
};
},{}],15:[function(require,module,exports){
//  Sigma.getChannelId module

//  Collect channel id's
module.exports = function () {
  Sigma.socket.on('id', function (data) {
    Sigma.getChannelId = data.id;
    //  Then create a listener
    Sigma.listen();
  });
};
},{}],16:[function(require,module,exports){
//  Sigma.getHistory module

//  History sent by the server
module.exports = function () {
  Sigma.socket.on('history', function (data) {
    //  If not empty
    if (data.empty) {
      var title = 'Welcome here pioneer!',
          content = 'It seems that you are the very first person on that channel. Please sign in or sign up.';
      Sigma.addContent(false, undefined, title, content, 'generated by Sigma', false);
    } else {
      //  Populate main div with the DOM content sent by the server
      data.documents.forEach(function (document) {
        Sigma.addContent(document.html, document._id);
      });
    }
    //  Keep track of channel emptiness
    Sigma.asyncUserAndHistoryState.channelIsEmpty = data.empty;
    //  Check if localStorage module was loaded too and set argument for empty channel
    Sigma.asyncUserAndHistoryState.check();
    //  Get images sources
    Sigma.loadResponsiveImages();
  });
};
},{}],17:[function(require,module,exports){
//  Sigma.getMongoId module

//  Get mongoDB's id of new content
module.exports = function () {
  Sigma.socket.on('mongoId', function (data) {
    Sigma.changeId(data.tempId, data.id, data.type);
  });
};
},{}],18:[function(require,module,exports){
//  Sigma.getSocketMessage module

//  Receive message through websockets
module.exports = function () {
  Sigma.socket.on('socketMessage', function (data) {
    Sigma.manageMessage(true, data.message, data.type);
  });
};
},{}],19:[function(require,module,exports){
//  Sigma.getTempId module

//  Assign a temporary id to manage new content
module.exports = function () {
  var crypto = window.crypto.getRandomValues(new Uint32Array(8)),
      id = '';
  for (var i = 0; i < crypto.length; ++i) {
    id += crypto[i].toString(16);
    if (i < crypto.length - 1) {
      id += '-';
    }
  }
  return id;
};
},{}],20:[function(require,module,exports){
//  Sigma.heroHeader module

//  Add or remove header
module.exports = {
  add : function () {
    //  Add if not visible of first launch
    if (this.isVisible === undefined || !this.isVisible) {
      var body = document.querySelector('body'),
        main = document.querySelector('main'),
        hero = document.createElement('header'),
        title = document.createElement('h1');
      body.insertBefore(hero, main);
      hero.setAttribute('class', 'hero');
      hero.appendChild(title);
      title.appendChild(document.createTextNode('Create and share data in true real-time.'));
      this.isVisible = true;
    }
  },
  remove : function () {
    //  Remove only if visible
    if (this.isVisible === undefined || this.isVisible) {
      var hero = document.querySelector('header');
      hero.parentNode.removeChild(hero);
      this.isVisible = false;
    }
  }
};
},{}],21:[function(require,module,exports){
//  Sigma.isOnLine module

//  Get navigator online status
module.exports = function () {
  if ('onLine' in navigator) {
    return navigator.onLine;
  } else {
    return undefined;
  }
};
},{}],22:[function(require,module,exports){
//  Sigma.listen module

//  Listen changes sent by the server
module.exports = function () {
  Sigma.socket.on('broadcast', function (data) {
    Sigma.disconnectObservers();
    switch (data.action) {
      //  Add new content
      case 'create':
        Sigma.addContent(data.html, data.id);
        break;
      //  Update content
      case 'update':
        Sigma.updateContent(data.html, data.id);
        break;
      //  Delete content
      case 'delete':
        Sigma.deleteContent(data.id);
        break;
    }
    Sigma.setObservers();
    Sigma.loadResponsiveImages();
  });
};
},{}],23:[function(require,module,exports){
//  Sigma.loadResponsiveImages module

//  Load images on content update
module.exports = function () {
  var appWidth = document.querySelector('[data-app-width]'),
      responsiveImages = document.querySelectorAll('[data-image]'),
      loadSource = function (i) {
        //  Change data attribute
        responsiveImages[i].dataset.imageWidth = appWidth.dataset.appWidth;
        //  And inject source
        var source = Sigma.host+':'+Sigma.port+'/data/'+responsiveImages[i].dataset.mongoId+'/'+appWidth.dataset.appWidth;
        responsiveImages[i].setAttribute('src', source);
      };
  for (var i = 0; i < responsiveImages.length; ++i) {
    loadSource(i);
  }
};
},{}],24:[function(require,module,exports){
//  Sigma.makeOwnerArticlesEditable module

//  Make contenteditable set to true for the owner
module.exports = function () {
  //  Make contenteditable set to true if the user is the owner
  var data = document.querySelectorAll('[data-sigma]'),
      resetAndMakeEditable = function (i) {
        var owner = data[i].parentNode.querySelector('[data-owner]').dataset.owner;
        if (owner === Sigma.username) {
          data[i].contentEditable = 'true';
        } else {
          data[i].contentEditable = 'false';
        }
      };
  for (var i = 0; i < data.length; ++i) {
    resetAndMakeEditable(i);
  }
};
},{}],25:[function(require,module,exports){
//  Sigma.manageMessage module

//  Hide or show a message
module.exports = function (action, message, type) {
  var currentMessage = document.querySelector('[data-message]'),
      messageType = type ? 'confirmation' : 'alert',
      deleteMessage = function () {
        if (currentMessage) {
          currentMessage.parentNode.removeChild(currentMessage);
        }
      },
      updateOrCreateMessage = function () {
        if (currentMessage) {
          //  Update message
          currentMessage.dataset.message = messageType;
          currentMessage.innerHTML = message;
        } else {
          //  Create new message
          var newMessage = document.createElement('span'),
              eraseMessage = function (event) {
                var target = event.target,
                    removeMessage = function () {
                      target.parentNode.removeChild(target);
                    };
                target.classList.add('removeMessage');
                // Cross-browser event listeners
                Sigma.animationListener(true, target, removeMessage, true);
              };
          newMessage.dataset.message = messageType;
          newMessage.innerHTML = message;
          //  If message is added when there's no navigation
          if (!Sigma.navigation.visibility) {
            newMessage.classList.add('withNoNavigation');
          }
          //  Push changes to the DOM
          var body = document.querySelector('body');
          body.appendChild(newMessage);
          //  Add click event
          Sigma.clickAndTouchListener.add(newMessage, 'eraseMessage', eraseMessage);
        }
      };
  if (action) {
    updateOrCreateMessage();
  } else {
    deleteMessage();
  }
};
},{}],26:[function(require,module,exports){
//  Sigma.navigation module

//  Show or hide nav
module.exports = {
  //  Is visible by default
  visibility: true,
  hide : function () {
    var nav = document.querySelector('nav'),
        message = document.querySelector('[data-message]');
    nav.classList.add('removeNavigation');
    this.visibility = false;
    //  Make message stick on the bottom as there's no navigation
    if(message) {
      message.classList.add('withNoNavigation');
    }
  },
  show : function () {
    var nav = document.querySelector('nav'),
        message = document.querySelector('[data-message]');
    nav.classList.remove('removeNavigation');
    this.visibility = true;
    //  Make message back to default position
    if(message) {
      message.classList.remove('withNoNavigation');
    }
  }
};
},{}],27:[function(require,module,exports){
//  Sigma.observeWidth module

//  Simulate width observer with animationStart event for responsive image
module.exports = function () {
  var appWidth = document.querySelector('[data-app-width]'),
      responsiveImages,
      changeWidth = function (i) {
        //  Change data attribute
        responsiveImages[i].dataset.imageWidth = appWidth.dataset.appWidth;
        //  And inject source
        var source = Sigma.host+':'+Sigma.port+'/data/'+responsiveImages[i].dataset.mongoId+'/'+appWidth.dataset.appWidth;
        responsiveImages[i].setAttribute('src', source);
      },
      getWidth = function () {
        //  Retrieve content from ::after and set it as [data-app-width]
        var content = window.getComputedStyle(appWidth, '::after').getPropertyValue('content'),
            //  Little hack for Firefox which adds double quotes
            deviceWidth = content.replace(/\"/g, "");
        //  Sigma.deviceWith is define for further use
        appWidth.dataset.appWidth = Sigma.deviceWidth = deviceWidth;
        //  Adapt responsive images to screen
        responsiveImages = document.querySelectorAll('[data-image-width]');
        for (var i = 0; i < responsiveImages.length; ++i) {
          changeWidth(i);
        }
      };
  //  Cross-browser event listeners
  Sigma.animationListener(false, appWidth, getWidth, false);
};
},{}],28:[function(require,module,exports){
//  Sigma.preventPasting module

//  Paste processing
module.exports = function () {
  window.addEventListener('paste', function (event) {
    Sigma.manageMessage(true, 'Pasting is currently not supported due to cross-browser limitations. Use drag and drop instead.', false);
    event.preventDefault();
  }, false);
};
},{}],29:[function(require,module,exports){
//  Sigma.resetAndHighlightUserArticles module

//  Reset and highlight user's articles
module.exports = function () {
  var selector = '[data-owner="' + Sigma.username + '"]',
      articles = document.querySelectorAll(selector),
      articlesToReset = document.querySelectorAll('.isYours'),
      reset = function (i) {
        articlesToReset[i].classList.remove('isYours');
      },
      highlight = function (j) {
        articles[j].parentNode.classList.add('isYours');
      };
  //  Reset articles with .isYours class from former connection
  for (var i = 0; i < articlesToReset.length; ++i) {
    reset(i);
  }
  //  Then highlight user's articles
  for (var j = 0; j < articles.length; ++j) {
    highlight(j);
  }
};
},{}],30:[function(require,module,exports){
//  Sigma.saveManager module

//  Manage save state of articles
module.exports = {
  pool : [],
  init : function () {
    //  Receive save state
    Sigma.socket.on('saveState', function (data) {
      if (data.tempId !== undefined) {
        Sigma.saveManager.toggleState(data.tempId, data.state);
      } else {
        if (data.id !== undefined) {
          Sigma.saveManager.toggleState(data.id, data.state);
        }
      }
    });
  },
  add : function (id, state) {
    var index = this.find(id);
    if (index === null) {
      this.pool.push([id, state]);
    } else {
      this.pool[index][1] = state;
    }
  },
  find : function (id) {
    var selectIds = function (row) {
      return row[0];
    },
        index = this.pool.map(selectIds).indexOf(id);
    return index !== -1 ? index : null;
  },
  showSaveState : function () {
    console.log('S A V E D !!!');
  },
  toggleId : function (tempId, id) {
    //  Replace temporary id with new mongoDB id in pool
    var index = this.find(tempId);
    if (index !== null) {
      this.pool[index][0] = id;
    }
  },
  toggleState : function (id, state) {
    //  Change state
    var index = this.find(id);
    if (index !== null) {
      this.pool[index][1] = state;
      this.showSaveState();
    }
  }
};
},{}],31:[function(require,module,exports){
//  Sigma.setObservers module

//  Set observers
module.exports = function () {
  var MutationObserver = window.MutationObserver ||
                         window.WebKitMutationObserver ||
                         window.MozMutationObserver,
      observers = [],
      data = document.querySelectorAll('[data-sigma]'),
      //  Attach observers on selected nodes
      attachObserver = function (i) {
        observers[i] = new MutationObserver(function (mutations) {
          //  For each mutation into the DOM, sync content server-side
          mutations.forEach(function (mutation) {
            //  Synchronize
            Sigma.synchronize();
            Sigma.droppedImages.lookAtMutations(mutation);
          });
        });
        observers[i].observe(data[i], {
          attributes: true, 
          childList: true, 
          characterData: true,
          attributeOldValue: true,
          subtree: true,
          characterDataOldValue: true
        });
      };
  for (var i = 0; i < data.length; ++i) {
    attachObserver(i);
  }
  //  Save a list of observers
  Sigma.observers = observers;
};
},{}],32:[function(require,module,exports){
//  Sigma.signIn module

//  Manage a form to handle user sign-in process
module.exports = {
  addForm : function () {
    //  Create the form
    var _this = this,
        body = document.querySelector('body'),
        aside = document.createElement('aside'),
        form = document.createElement('form'),
        usernameDiv = document.createElement('div'),
        passwordDiv = document.createElement('div'),
        usernameLabel = document.createElement('label'),
        passwordLabel = document.createElement('label'),
        usernameInput = document.createElement('input'),
        passwordInput = document.createElement('input'),
        usernameSpan = document.createElement('span'),
        passwordSpan = document.createElement('span'),
        cancelButton = document.createElement('button'),
        returnHome = function (event) {
          var removeAside = function () {
            //  Remove from DOM at animation's end
            aside.parentNode.removeChild(aside);
          };
          // Cross-browser event listeners
          Sigma.animationListener(true, aside, removeAside, true);
          //  Launch aside slide animation
          aside.classList.add('removeAside');
          //  Make body scrollable again
          body.classList.remove('noScroll');
          //  Show nav again
          Sigma.navigation.show();
          //  Remove mousewheel and touchmove listeners
          Sigma.disableMouseWheelAndTouchMove(body, false);
          //  Set visibility
          _this.isVisible = false;
          //  Remove unclosed message if present
          Sigma.manageMessage(false);
        };
    form.setAttribute('class', 'signIn');
    form.setAttribute('data-validation', 'Username and password must be 6 characters long with no white space! Password must contain at least 1 digit!');
    usernameDiv.setAttribute('class', 'usernameUberInput');
    passwordDiv.setAttribute('class', 'passwordUberInput');
    usernameInput.setAttribute('class', 'username');
    usernameInput.setAttribute('type', 'text');
    usernameInput.setAttribute('placeholder', 'Username');
    usernameInput.setAttribute('autofocus', '');
    passwordInput.setAttribute('class', 'password');
    passwordInput.setAttribute('type', 'password');
    passwordInput.setAttribute('placeholder', 'Password');
    usernameSpan.setAttribute('id', 'usernameInputState');
    passwordSpan.setAttribute('id', 'passwordInputState');
    cancelButton.setAttribute('type', 'button');
    cancelButton.setAttribute('class', 'cancel');
    cancelButton.appendChild(document.createTextNode('cancel'));
    //  Remove scrolling
    body.classList.toggle('noScroll');
    //  Append it to the DOM
    body.insertBefore(aside, body.firstChild);
    aside.appendChild(form);
    form.appendChild(usernameDiv);
    form.appendChild(passwordDiv);
    usernameDiv.appendChild(usernameLabel);
    usernameDiv.appendChild(usernameInput);
    usernameDiv.appendChild(usernameSpan);
    passwordDiv.appendChild(passwordLabel);
    passwordDiv.appendChild(passwordInput);
    passwordDiv.appendChild(passwordSpan);
    form.appendChild(cancelButton);
    //  Append it to the main objet
    Sigma.signIn.form = form;
    //  Temporary disable wheel and touch
    Sigma.disableMouseWheelAndTouchMove(body, true);
    //body.addEventListener('mousewheel', disableMouseWheelOrTouchMove, false);
    //body.addEventListener('touchmove', disableMouseWheelOrTouchMove, false);
    Sigma.clickAndTouchListener.add(cancelButton, 'returnHome', returnHome);
  },
  checkForm : function (event) {
    var form = document.querySelector('form'),
        username = document.querySelector('.username').value,
        password = document.querySelector('.password').value,
        usernameSpan = document.querySelector('#usernameInputState'),
        passwordSpan = document.querySelector('#passwordInputState'),
        //  Username regex with length > 6 and no white space
        usernameRegex = new RegExp('^\\S{6,}$'),
        usernameIsOk = usernameRegex.test(username),
        //  Password regex with length > 6, no white space and at least one digit
        passwordRegex = new RegExp('^(?=.*\\d)\\S{6,}$'),
        passwordIsOk = passwordRegex.test(password),
        credentialsAreOk = usernameIsOk && passwordIsOk,
        validationMessage = '',
        toggleSubmitButtonVisibilityTo = function (state) {
          var buttonToRemove = document.querySelector('button[type=submit]');
          if (state) {
            if (!buttonToRemove) {
              var newButton = document.createElement('button');
              newButton.setAttribute('type', 'submit');
              newButton.appendChild(document.createTextNode('sign in | up'));
              Sigma.signIn.form.appendChild(newButton);
            }
          } else {
            if (!!buttonToRemove) {
              buttonToRemove.parentNode.removeChild(buttonToRemove);
            }
          }
        };
    if(credentialsAreOk) {
      //  Append username & password to the main objet
      Sigma.signIn.username = username;
      Sigma.signIn.password = password;
      //  Show that inputs are valid
      usernameSpan.className = passwordSpan.className = 'isOk';
      //  Remove previous validation message
      Sigma.manageMessage(false);
      //  Add submit button
      toggleSubmitButtonVisibilityTo(true);
    } else {
      //  Show inputs validity
      if (usernameIsOk) {
        if (username !== '') {
          usernameSpan.className = 'isOk';
        }
      } else {
        if (username !== '') {
          validationMessage += 'Username must be at least 6 characters long!';
          usernameSpan.className = 'isErroneous';
        } else {
          usernameSpan.className = '';
        }
      }
      if (passwordIsOk) {
        if (password !== '') {
          passwordSpan.className = 'isOk';
        }
      } else {
        if (password !== '') {
          if (validationMessage !== '') {
            validationMessage += ' ';
          }
          validationMessage += 'Password must be at least 6 characters long with one digit!';
          passwordSpan.className = 'isErroneous';
        } else {
          passwordSpan.className = '';
        }
      }
      //  Show message
      if (validationMessage !== '') {
        Sigma.manageMessage(true, validationMessage, false);
      } else {
        Sigma.manageMessage(false);
      }
      //  Remove submit button
      toggleSubmitButtonVisibilityTo(false);
    }
  },
  submit : function (event) {
    event.preventDefault();
    Sigma.socket.emit('signIn', { username: Sigma.signIn.username, password: Sigma.signIn.password });
  },
  init : function () {
    this.isVisible = true;
    this.addForm();
    this.form.addEventListener('input', this.checkForm, false);
    this.form.addEventListener('submit', this.submit, false);
  }
};
},{}],33:[function(require,module,exports){
//  Sigma.signUp module

//  Sign Up process
module.exports = {
  submit : function (event) {
    event.preventDefault();
    Sigma.socket.emit('signUp', { username: Sigma.signIn.username, password: Sigma.signIn.password });
  },
  init : function () {
    Sigma.socket.on('signUp', function (data) {
      Sigma.manageMessage(true, 'Unknown username! Want to sign up as '+data.username+'?', true);
      //  Update submit button
      var button = document.querySelector('button[type=submit]');
      button.innerText = 'sign up';
      button.classList.add('signUp');
      Sigma.signIn.form.removeEventListener('submit', Sigma.signIn.submit, false);
      Sigma.signIn.form.addEventListener('submit', Sigma.signUp.submit, false);
    });
  }
};
},{}],34:[function(require,module,exports){
//  Sigma.simpleCounter module

//  Simple counter
module.exports = {
  i: 0,
  get value() {
    ++this.i;
    return this.i;
  }
};
},{}],35:[function(require,module,exports){
//  Sigma.storeImage module

//  Store image in mongoDB
module.exports = function (tempId, smallImage, largeImage) {
  Sigma.socket.emit('storeImage', { tempId: tempId, smallImage: smallImage, largeImage: largeImage });
};
},{}],36:[function(require,module,exports){
//  Sigma.synchronize module

//  Sync process
module.exports = function () {
  //  Look at active element
  var article = document.activeElement.parentNode,
      isArticleNode = article.nodeName === 'ARTICLE',
      isArticleInDataset = article.dataset.structure === 'article';
  //  Only synchronize with valid articles
  if (isArticleNode && isArticleInDataset) {
    console.log(article);
    var articleClone = article.cloneNode(true),
        articleFragment = document.createDocumentFragment(),
        mongoId,
        tools,
        articleHTML,
        images,
        makeImagesNeutral = function (i) {
          //  Reset image's source
          images[i].removeAttribute('src');
          //  Remove responsive data
          images[i].removeAttribute('data-image-width');
        },
        makeReadOnly = function (j) {
          //  Make all Sigma attributes with contenteditable set to false
          editableElements[j].contentEditable = 'false';
        };
    //  Inject article into empty clone
    articleFragment.appendChild(articleClone);
    //  Select tools into the clone
    tools = articleFragment.querySelector('.tools');
    //  Then remove it if present
    if ( tools !== null) {
      tools.parentNode.removeChild(tools);
    }
    //  Make responsives images neutral
    images = articleFragment.querySelectorAll('[data-image-width]');
    for (var i = 0; i < images.length; ++i) {
      makeImagesNeutral(i);
    }
    //  Make contenteditable set to false
    editableElements = articleFragment.querySelectorAll('[data-sigma]');
    for (var j = 0; j < editableElements.length; ++j) {
      makeReadOnly(j);
    }
    //  Convert it
    articleHTML = articleFragment.querySelector('[data-structure="article"]').innerHTML;
    //  Process it
    if (document.hasFocus()) {
      //  Check if div has a mongo id attribute => update content
      if (article.hasAttribute('data-mongo-id')) {
        if (article.dataset.idType === 'const') {
          //  Id is from mongo
          mongoId = article.dataset.mongoId;
          Sigma.socket.emit(Sigma.getChannelId, { action: 'update', mongoId: mongoId, html: articleHTML, owner: Sigma.username });
        } else {
          //  Id is a temporary one

          //  !!!!!!!!!!!!!!!!!!!!

          console.log('berp');
        }
      } else {
        //  Create new content
        article.dataset.idType = 'tmp';
        mongoId = Sigma.getTempId();
        article.dataset.mongoId = mongoId;
        Sigma.socket.emit(Sigma.getChannelId, { action: 'create', mongoId: mongoId, html: articleHTML, owner: Sigma.username });
      }
      //  Add save state for the article
      Sigma.saveManager.add(mongoId, false);
    }
  }
};
},{}],37:[function(require,module,exports){
//  Sigma.tools module

//  Attach or remove edit icon
module.exports = {
  attach : function () {
    var data = document.querySelectorAll('[data-sigma]'),
        attachTools = function (i) {
          var owner = data[i].parentNode.querySelector('[data-owner]').dataset.owner;
          if (Sigma.username === owner) {
            Sigma.contentEditing.status(data[i]);
          }
        };
    for (var i = 0; i < data.length; ++i) {
      attachTools(i);
    }
  },
  remove : function () {
    var data = document.querySelectorAll('[data-sigma]');
    for (var j = 0; j < data.length; ++j) {
      Sigma.contentEditing.status(data[j], false);
    }
  }
};
},{}],38:[function(require,module,exports){
//  Sigma.tryLocalStorage module

//  Try if localStorage is supported by the browser
module.exports = {
  changeUserInterfaceToSign : function () {
    //  Reset and highlight user's articles
    Sigma.resetAndHighlightUserArticles();
    //  Provide a form to sign in and to sign up
    Sigma.connectOrCreateButton(true);
    //  Add Hero header
    Sigma.heroHeader.add();
    //  Enable user connection
    Sigma.userIsConnected();
    //  Set observers
    Sigma.setObservers();
  },
  checkStorageState : function (event) {
    //  Check storage state in realtime
    Sigma.tryLocalStorage.clearStorage();
    Sigma.manageMessage(true, 'Unwanted LocalStorage change occured. LocalStorage has been cleared.', false);
    Sigma.tryLocalStorage.changeUserInterfaceToSign();
  },
  clearStorage : function () {
    //  Clear app local storage
    var _this = this;
    window.removeEventListener('storage', _this.checkStorageState, false);
    localStorage.clear();
    window.addEventListener('storage', _this.checkStorageState, false);
    Sigma.username = undefined;
    Sigma.tools.remove();
    Sigma.makeOwnerArticlesEditable();
  },
  init : function () {
    if ('localStorage' in window) {
      var _this = this,
          localData = localStorage.sigma === undefined ? { username: undefined, password: undefined } : JSON.parse(localStorage.sigma);
      //  Add listener on storage
      window.addEventListener('storage', _this.checkStorageState, false);
      //  Server response for localStorage's credentials
      Sigma.socket.on('localStorageState', function (data) {
        if (data.secure) {
          window.removeEventListener('storage', _this.checkStorageState, false);
          //  Save username into the app
          Sigma.username = localData.username;
          window.addEventListener('storage', _this.checkStorageState, false);
          //  Check if history module was loaded too
          Sigma.asyncUserAndHistoryState.check();
        } else {
          _this.clearStorage();
          Sigma.manageMessage(true, 'Wrong credentials were stored in local browser. Please sign in or sign up!', false);
          _this.changeUserInterfaceToSign();
        }
      });
      //  Send collected credentials
      if (localData.username !== undefined && localData.password !== undefined) {
        Sigma.socket.emit('checkLocalStorage', { username: localData.username, password: localData.password });
      } else {
        _this.clearStorage();
        _this.changeUserInterfaceToSign();
      }
    } else {
      Sigma.manageMessage(true, 'LocalStorage is not supported!', false);
    }
  }
};
},{}],39:[function(require,module,exports){
//  Sigma.updateContent module

//  Update content
module.exports = function (html, id) {
  var selector = '[data-mongo-id="' + id + '"]',
      node = document.querySelector(selector);
  //  If id exists on the client
  if (node !== null) {
    node.innerHTML = html;
  }
};
},{}],40:[function(require,module,exports){
//  Sigma.userIsConnected module

//  Manage user connection
module.exports = function () {
  Sigma.socket.on('isConnected', function (data) {
    var aside = document.querySelector('aside'),
        body = document.querySelector('body'),
        //  Remove aside
        returnHome = function () {
          var removeAside = function () {
            //  Remove from DOM at animation's end
            console.log(aside);
            if (aside !== null) {
              aside.parentNode.removeChild(aside);
            }
          };
          // Cross-browser event listeners
          Sigma.animationListener(true, aside, removeAside, true);
          //  Launch aside slide animation
          aside.classList.add('removeAside');
          //  Make body scrollable again
          body.classList.remove('noScroll');
          //  Show nav again
          Sigma.navigation.show();
          //  Remove listeners
          Sigma.disableMouseWheelAndTouchMove(body, false);
          //  Set form visibility
          Sigma.signIn.isVisible = false;
          //  Remove unclosed message if present
          Sigma.manageMessage(false);
        };
    //  Return home
    returnHome();
    //  Save username into the app
    Sigma.username = data.username;
    //  Try to use localStorage
    if ('localStorage' in window) {
      //  Store data as JSON
      localStorage.sigma = JSON.stringify({username : Sigma.username, password : data.password});
    } else {
      Sigma.manageMessage(true, 'LocalStorage is not supported!', false);
    }
    //  Check if history module was loaded too
    Sigma.asyncUserAndHistoryState.check();
    console.log('userIsConnected');
    //  Remove Hero header
    Sigma.heroHeader.remove();
  });
};
},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
